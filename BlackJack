# Mini-project #6 - Blackjack
//BlackJack Game written in Python

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = True
outcome = ""
score = 0
state = ""

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand = []
        
                
    def __str__(self):        
        string_hand = "Hand Contains "
        for cards in self.hand:
            string_hand = cards.__str__() + "  "
        return string_hand            
       # return a string representation of a hand

    def add_card(self, card):
        if isinstance(card,Card):
            self.hand.append(card)
        else:
            print "Invalid argument ", type(card)
            # add a card object to a hand

    def get_value(self):
        # list of the values of the cards in the Hand
        card_values = []
        
        # Make a list of values in the hand
        for cards in self.hand:
            card_values.append(VALUES[cards.get_rank()])
        
        hand_value = sum ( card_values )
        
        # check if no 'A'. ('A' has a value of 1)
        if 1 not in card_values:
            return hand_value
        elif hand_value + 10 <= 21:
            return hand_value + 10
        else:
            return hand_value
                  
    def draw(self, canvas, pos):
        index = 0
        for cards in self.hand:
            cards.draw (canvas, [pos[0] + index*(CARD_SIZE[0] + 5) , pos[1]] )
            index += 1
            # draw a hand on the canvas, use the draw method for cards
 
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck = []
        for suit in SUITS:
            for rank in RANKS:
                card = Card( suit, rank )
                self.deck.append (card)
                        
    def shuffle(self):
        random.shuffle(self.deck)        

    def deal_card(self):
        return self.deck.pop()
            
    def __str__(self):
        deck = "Deck: "	
        for card in self.deck:
            deck += card.__str__() + " "
        return deck    


#define event handlers for buttons
def deal():
    global outcome, in_play, state, deck, dealer_hand, player_hand
    in_play = True
    outcome = ""
    
    deck.shuffle()
    dealer_hand = Hand()
    player_hand = Hand()
    dealer_hand.add_card ( deck.deal_card() )
    dealer_hand.add_card ( deck.deal_card())
    player_hand.add_card ( deck.deal_card() )
    player_hand.add_card ( deck.deal_card() ) 
    state = "Hit or Stand?"

def hit():
    global outcome, score, in_play, state
    if in_play:
        if player_hand.get_value() < 21:
            player_hand.add_card(deck.deal_card())
            if player_hand.get_value() > 21:
                outcome = "You are busted! You lose!"
                score -= 1
                state = "New Deal?"
                in_play = False
        else:
            outcome = "You are busted! You lose!"
            state = "New Deal?"
            score -= 1
   
       
def stand():
    global in_play,outcome, state, score
    
    if in_play:        
        while dealer_hand.get_value() < 17:
            dealer_hand.add_card( deck.deal_card())
            
        in_play = False            
            
        if dealer_hand.get_value > 21:
            outcome = "Dealer Busted! You win"   
            state = "New Deal?"
        elif dealer_hand.get_value() < player_hand.get_value() :
            outcome = "You win"
            state = "New Deal?"
            score += 1
        else:
            outcome = "You lose"
            state = "New Deal?"
            score -= 1
    else:
        outcome = "You are already busted! You lose"
        state = "New Deal?"
        
# draw handler    
def draw(canvas):
    dealer_hand.draw(canvas, [50,120])
    #To draw back of card

    canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [50 + CARD_BACK_SIZE[0]/2,120 + CARD_BACK_SIZE[1]/2], CARD_BACK_SIZE)
    player_hand.draw(canvas, [50,350])
    canvas.draw_text("BLACKJACK!", (200,35), 40, 'Black')
    canvas.draw_text("Score: " + str(score) ,(500,55), 20, 'Black')
    canvas.draw_text("Dealer", (90,100), 25, 'Black')
    canvas.draw_text("Player", (90,330), 25, 'Black')
    canvas.draw_text(outcome, (200,100), 25, 'Black')
    canvas.draw_text(state, (400,300), 25, 'Black')
    

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

deck = Deck()
dealer_hand = Hand()
player_hand = Hand()

# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
